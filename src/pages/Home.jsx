import React, { useEffect, useRef, useState } from "react";

import Categories from "../components/Categories";
import Sort from "../components/Sort";

import { list } from "../components/Sort";
import Pizzablock from "../components/Pizzablock";
import Skeleton from "../components/Skeleton";
import Pagination from "../components/Pagination";
import { Link, useNavigate, useSearchParams } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import qs from "qs";

import {
  filterSelector,
  setCategoryId,
  setCurrentPage,
  setFilters,
} from "../redux/slices/filterSlice";
import { fetchPizzas, pizzaSelector } from "../redux/slices/pizzasSlice";

const Home = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isSearch = useRef(false);
  const isMounted = useRef(false);

  const { items, status } = useSelector(pizzaSelector);

  const { —ÅategoryId, sort, currentPage, searchValue } =
    useSelector(filterSelector);

  const searchParams = useSearchParams();

  console.log(searchParams);
  const getPizzas = async () => {
    dispatch(
      fetchPizzas({
        —ÅategoryId,
        sortBy,
        searchValue,
        currentPage,
      })
    );
    window.scrollTo(0, 0);
  };

  // const [activeSort, setActiveSort] = useState({
  //   name: "–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏",
  //   sortProperty: "rating",
  // });

  const onChangePage = (number) => {
    dispatch(setCurrentPage(number));
  };

  // const category = —ÅategoryId > 0 ? `category=${—ÅategoryId}` : "";
  const sortBy = sort.sortProperty;
  // const order = ""; // –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º

  const pizzas = items
    // .filter((obj) =>
    //   obj.title.toLowerCase().includes(searchValue.toLowerCase())
    // ) //—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏–∫–∞
    .map((obj, i) => (
      <Link key={i} to={`/pizza/${obj.id}`}>
        <Pizzablock {...obj} />
      </Link>
    ));
  const skeletons = [...new Array(6)].map((_, i) => <Skeleton key={i} />);

  //–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä , —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥—É–∫—Å

  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      const sortList = list.find(
        (obj) => obj.sortProperty === params.sort.sortProperty
      );

      dispatch(setFilters({ ...params, sortList }));
      isSearch.current = true;
    }
  }, []);

  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —É–∂–µ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä,

  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        —ÅategoryId,
        sort,
        currentPage,
        searchValue,
      });
      navigate(`?${queryString}`);
    }
    isMounted.current = true;
  }, [—ÅategoryId, sort, currentPage]);

  // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä , –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã

  useEffect(() => {
    getPizzas();
  }, [—ÅategoryId, sort, currentPage, searchValue]);

  return (
    <>
      <div className="content">
        <div className="content__top">
          <Categories
            value={—ÅategoryId}
            onChangeCategory={(i) => dispatch(setCategoryId(i))}
          />
          <Sort />
        </div>
        <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
        {status === "error" ? (
          <div>
            <div className="content__error-info">
              <h2>
                –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! <span>üòï</span>
              </h2>
              <p>
                –í–µ—Ä–æ—è—Ç–Ω–µ–π –≤—Å–µ–≥–æ, –≤—ã –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –µ—â—ë –ø–∏—Ü—Ü—É.
                <br />
                –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç—Ü—ã.
              </p>

              <a className="button button--black" href="/">
                <span>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</span>
              </a>
            </div>
          </div>
        ) : (
          <div className="content__items">
            {status === "loading" ? skeletons : pizzas}
          </div>
        )}

        <Pagination onChangePage={onChangePage} currentPage={currentPage} />
      </div>
    </>
  );
};

export default Home;
